A constructor is a method which is used to initialize an object of a class/struct.
    - Instance constructor: initialize inistance members.
    - private constuctor:   is a special instance constructor,
                            it is generally used in classes that constain ststic members only.
                            if a class only have private constructor, we cannot create instance of that class.
    - ststic constructor:   initialize ststic data members,
                            to performe action that need to be performed only once.
                            Properties of static constructors:
                            - doesnt take access modifier and are parameterless,
                            - class/struct can have only one static constructor,
                            - static constructors cannot be inherited or overloaded,
                            - A static constructor cannot be called directly and is only meant to be called by the common language runtime (CLR). 
                              It is invoked automatically.
                            - The user has no control on when the static constructor is executed in the program.
                            - If you don't provide a static constructor to initialize static fields, all static fields are initialized to their default value
                            - If a static constructor throws an exception, the runtime will not invoke it a second time, and the type will remain uninitialized for the lifetime of the application domain in which your program is running. Most commonly, a TypeInitializationException exception
                              is thrown when a static constructor is unable to instantiate a type or for an unhandled exception occurring within a static constructor.
                              A field declared as static readonly may only be assigned as part of its declaration or in a static constructor.


    C# doesn't provide a copy constructor for objects, but you can write one yourself.
